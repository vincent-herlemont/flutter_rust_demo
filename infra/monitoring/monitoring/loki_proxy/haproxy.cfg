global
    log stdout local0

defaults
    log global
    mode http
    option httplog
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

frontend http_front
    bind *:3101

    # JWT validation: https://www.haproxy.com/blog/verify-oauth-jwt-tokens-with-haproxy
    http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg')

    # get payload part of the JWT
    http-request set-var(txn.iss) http_auth_bearer,jwt_payload_query('$.iss')
    http-request set-var(txn.role) http_auth_bearer,jwt_payload_query('$.role')
    http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int')

    # Validate the JWT
    http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm'  unless { var(txn.alg) -m str HS256 }
    # TODO: Check iss
    #http-request deny content-type 'text/html' string 'Invalid JWT issuer'  unless { var(txn.iss) -m str supabase-demo }
    # TODO: Check role
    #http-request deny content-type 'text/html' string 'Invalid JWT role'  unless { var(txn.role) -m str anon }
    http-request deny content-type 'text/html' string 'Invalid JWT signature'  unless { http_auth_bearer,jwt_verify(txn.alg,"$SUPABASE_JWT_SECRET") -m int 1 }
    http-request set-var(txn.now) date()
    http-request deny content-type 'text/html' string 'JWT has expired' if { var(txn.exp),sub(txn.now) -m int lt 0 }

    default_backend http_anonymous

backend http_anonymous
    http-request set-header X-Scope-OrgID %[env(TENANT_ID)]
    server srv1 $MONITORING_LOKI_HOST_PORT
